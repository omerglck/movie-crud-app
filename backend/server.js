const http = require("http");
const getRequest = require("./methods/get");
const postRequest = require("./methods/post");
const deleteRequest = require("./methods/delete");

// 1) Server oluÅŸtur
const server = http.createServer((req, res) => {
  console.log("ğŸ˜€ istek geldi", req.method);
  /*
    ! Not:
    * Frontend e gÃ¶nderilecek olan bÃ¼tÃ¼n cevaplara eklenilecek ve
    * `CORS` hatasÄ±nÄ± engelleyecek headerÄ± tanÄ±mlayalÄ±m.
  */
  res.setHeader("Access-Control-Allow-Origin", "*");

  //* Ä°stek atÄ±lan method tÃ¼rÃ¼ne gÃ¶re clienta cevap verecek fonksiyonu belirledik
  //* FonksiyonlarÄ± kod kalabalÄ±ÄŸÄ± olmamasÄ± iÃ§in module yapÄ±sÄ± ile ayrÄ± dosyalarda oluÅŸturup import edip kullandÄ±k
  switch (req.method) {
    /*
      ! Not:
      * Front-end den bir post/put/patch/delete isteÄŸi atÄ±ldÄ±ÄŸÄ± zaman tarayÄ±cÄ± Ã¶ncelikle serverÄ± 
      * bu istek tiplerini kabul ettiÄŸini kontrol etmek amacÄ±yla options metodu ile istek atar
      * EÄŸer options isteÄŸi gelince cevap gÃ¶ndermezsek diÄŸer isteÄŸi hiÃ§ atmÄ±yor.option gelince 
      * doÄŸru header ile cevap verirsek optionsÄ±n ardÄ±ndan asÄ±l isteÄŸi gÃ¶nderiyor
    */
    case "OPTIONS":
      res.setHeader(
        "Access-Control-Allow-Methods",
        "GET,POST,DELETE,PUT,PATCH,OPTIONS"
      );
      res.setHeader("Access-Control-Allow-Headers", "Content-Type");
      res.end();
      break;
    case "GET":
      getRequest(req, res);
      break;
    case "POST":
      postRequest(req, res);
      break;
    case "DELETE":
      deleteRequest(req, res);
      break;
    default:
      //* cevabÄ±n durum kodunu belirleyelim.HatalÄ± bir istek olmasÄ±na raÄŸmen 200 dÃ¶nderir.Bunu dÃ¼zeltelim.
      res.statusCode = 404;
      //* gÃ¶nderilecek cevabÄ±n tipini belirleyelim Ã§Ã¼nkÃ¼ xml,text,json olabilir.Bunu belirleyelim.
      res.setHeader("Content-Type", "application/json");
      //* cevabÄ±n iÃ§eriÄŸini tanÄ±mladÄ±k
      res.write(
        JSON.stringify({
          message: "Ä°stek yapÄ±lan adres tanÄ±msÄ±z.",
        })
      );
      //* cliente cevabÄ± gÃ¶nder
      res.end();
  }
});

// 2) Belirli porta gelen istekleri dinle
const port = 5005;

server.listen(port, () => {
  console.log(`Server ${port}'a gelen istekleri dinlemeye baÅŸladÄ±`);
});
